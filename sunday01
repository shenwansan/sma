/************************************************************************
*   文件名：sunday01.c
*   文件描述：sunday函数接口
*	函数思路:在匹配过程中，模式串并不被要求一定要按从左向右进行比较还是从右向左进行比较，
*			它在发现不匹配时，算法能跳过尽可能多的字符以进行下一步的匹配，从而提高了匹配效率。
*	优化思路:1.第一次从首字符匹配，后续依次从子串长度+1个字符开始检查
*			 2.对于每一个字符首先检查待检查字符串的后续部分与当前子串的后续部分长度是否满足要求，尽可能减少匹配次数
*	创建人： SJW, 2016年4月14日
*   版本号：1.0
*   修改记录：
************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*================================================================
 * 函 数 名：find_char
 * 参    数1：待检查的字符串
 * 参    数2：待检查的字符
 * 参    数3：待检查的长度
 * 功能描述:检查子串的前n个字符中是否有待匹配字符
 * 返 回 值：成功:字符被匹配的位置，失败-1
 * 抛出异常：
 ================================================================*/
int find_char(char * str,char check,int point)
{
	int len = point;
	char temp[len+1];
	memset(temp, 0, len+1);
	strncpy(temp,str,len );
	if(!point||temp==NULL)
		return -1;
		
	char * res = strrchr(temp,check);
	if(res==NULL)
		return -1;
 
	return strlen(temp) - strlen(res);
}


/*================================================================
 * 函 数 名：MatchAlgorithm
 * 参    数1：待检查的字符串
 * 参    数2：待检查的子串
 * 功能描述:检查子串的前n个字符中是否有待匹配字符
 * 返 回 值：成功:字符被匹配的位置，失败-1
 * 抛出异常：
 ================================================================*/
int MatchAlgorithm(char * deststr, char * substr)
{
	int len_dst=strlen(deststr);
	int len_sub=strlen(substr);
	if(deststr==NULL||substr==NULL||len_dst<len_sub)
		return -1;

	if(!memcmp(substr,deststr,len_sub))
		return 0;
	
	int point = len_sub;
	while(point < len_dst)
	{
		int res = find_char(substr,deststr[point],len_sub);
		while(res!=-1)
		{
			if(len_dst - point <len_sub - res )
				return -1;
			if(!memcmp(substr,deststr + point - res,len_sub))
				return point  - res;
				
			res = find_char(substr,deststr[point], res);
		}
		point++;
	}
	return -1;
}

int main()
{
	char * deststr="absaddsasfasdfasdf";
	char * substr="dfa";
	int res = MatchAlgorithm(deststr, substr);
	
	if(res != -1)
		printf("\nwe can find substring from %d char\n",res + 1);
	else
		printf("\nwe can not find substring \n");
	
	return 0;
}
